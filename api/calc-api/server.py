import grpc
from concurrent import futures
import calc_pb2
import calc_pb2_grpc
import numpy as np
from astropy.time import Time
from astropy.coordinates import SkyCoord
import astropy.units as u
from poliastro.bodies import Sun, Earth
from poliastro.twobody import Orbit
from scipy.optimize import minimize


class CometCalculatorServicer(calc_pb2_grpc.CometCalculatorServicer):
    def CalculateOrbit(self, request, context):
        try:
            print("=" * 60)
            print("üîç –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï:")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π: {len(request.observations)}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
            for i, obs in enumerate(request.observations):
                print(f"  –ù–∞–±–ª—é–¥–µ–Ω–∏–µ {i+1}:")
                print(f"    RA: {obs.ra_hours:.6f} —á–∞—Å–æ–≤")
                print(f"    Dec: {obs.dec_degrees:.6f} –≥—Ä–∞–¥—É—Å–æ–≤")
                print(f"    Timestamp: {obs.timestamp} (Unix)")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if hasattr(obs, 'alt_degrees') and obs.alt_degrees:
                    print(f"    Alt: {obs.alt_degrees:.6f} –≥—Ä–∞–¥—É—Å–æ–≤")
                if hasattr(obs, 'az_degrees') and obs.az_degrees:
                    print(f"    Az: {obs.az_degrees:.6f} –≥—Ä–∞–¥—É—Å–æ–≤")
                if hasattr(obs, 'observer_lat_deg') and obs.observer_lat_deg:
                    print(f"    Observer Lat: {obs.observer_lat_deg:.6f} –≥—Ä–∞–¥—É—Å–æ–≤")
                if hasattr(obs, 'observer_lon_deg') and obs.observer_lon_deg:
                    print(f"    Observer Lon: {obs.observer_lon_deg:.6f} –≥—Ä–∞–¥—É—Å–æ–≤")
                if hasattr(obs, 'observer_height_m') and obs.observer_height_m:
                    print(f"    Observer Height: {obs.observer_height_m:.1f} –º")
                if hasattr(obs, 'uncertainty_arcsec') and obs.uncertainty_arcsec:
                    print(f"    Uncertainty: {obs.uncertainty_arcsec:.3f} arcsec")
                print()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            if hasattr(request, 'days_ahead') and request.days_ahead:
                print(f"Days ahead: {request.days_ahead}")
            else:
                print("Days ahead: –Ω–µ —É–∫–∞–∑–∞–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 730)")
            
            if len(request.observations) < 5:
                print("‚ùå –û–®–ò–ë–ö–ê: –ù—É–∂–Ω–æ ‚â•5 –Ω–∞–±–ª—é–¥–µ–Ω–∏–π")
                return calc_pb2.CalculateResponse(
                    success=False,
                    error="At least 5 observations required"
                )
            
            print("üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è poliastro...")
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è poliastro
            observations = []
            for obs in request.observations:
                coord = SkyCoord(
                    ra=obs.ra_hours * u.hourangle,
                    dec=obs.dec_degrees * u.deg,
                    distance=1.0 * u.AU  # –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ
                )
                observations.append({
                    'time': Time(obs.timestamp, format='unix'),
                    'coord': coord,
                    'ra_hours': obs.ra_hours,
                    'dec_degrees': obs.dec_degrees
                })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            observations.sort(key=lambda x: x['time'].jd)
            print(f"üîÑ –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(observations)} –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
            
            print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ä–±–∏—Ç—ã –º–µ—Ç–æ–¥–æ–º –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤...")
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–±–∏—Ç—É –º–µ—Ç–æ–¥–æ–º –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤
            orbit_params = self._determine_orbit_poliastro(observations)
            
            print("üîÑ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–±–ª–∏–∂–µ–Ω–∏–µ —Å –ó–µ–º–ª–µ–π...")
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–±–ª–∏–∂–µ–Ω–∏–µ —Å –ó–µ–º–ª–µ–π
            close_approach = self._calculate_close_approach(orbit_params['orbit'])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = calc_pb2.CalculateResponse(
                success=True,
                semi_major_axis_au=orbit_params['a'],
                eccentricity=orbit_params['e'],
                inclination_deg=orbit_params['i'],
                longitude_ascending_node_deg=orbit_params['raan'],
                argument_perihelion_deg=orbit_params['argp'],
                perihelion_passage_jd=orbit_params['t_p'],
                closest_approach_jd=close_approach['jd'],
                closest_distance_au=close_approach['distance_au'],
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print("‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–´–ß–ò–°–õ–ï–ù–ò–ô:")
            print(f"  –£—Å–ø–µ—Ö: {response.success}")
            print(f"  –ë–æ–ª—å—à–∞—è –ø–æ–ª—É–æ—Å—å: {response.semi_major_axis_au:.6f} –∞.–µ.")
            print(f"  –≠–∫—Å—Ü–µ–Ω—Ç—Ä–∏—Å–∏—Ç–µ—Ç: {response.eccentricity:.6f}")
            print(f"  –ù–∞–∫–ª–æ–Ω–µ–Ω–∏–µ: {response.inclination_deg:.6f} –≥—Ä–∞–¥—É—Å–æ–≤")
            print(f"  –î–æ–ª–≥–æ—Ç–∞ –≤–æ—Å—Ö–æ–¥—è—â–µ–≥–æ —É–∑–ª–∞: {response.longitude_ascending_node_deg:.6f} –≥—Ä–∞–¥—É—Å–æ–≤")
            print(f"  –ê—Ä–≥—É–º–µ–Ω—Ç –ø–µ—Ä–∏—Ü–µ–Ω—Ç—Ä–∞: {response.argument_perihelion_deg:.6f} –≥—Ä–∞–¥—É—Å–æ–≤")
            print(f"  –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–∏–≥–µ–ª–∏—è: {response.perihelion_passage_jd:.6f} JD")
            print(f"  –ë–ª–∏–∂–∞–π—à–µ–µ —Å–±–ª–∏–∂–µ–Ω–∏–µ: {response.closest_approach_jd:.6f} JD")
            print(f"  –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å–±–ª–∏–∂–µ–Ω–∏–∏: {response.closest_distance_au:.6f} –∞.–µ.")
            print("=" * 60)
            
            return response

        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –í–´–ß–ò–°–õ–ï–ù–ò–ô: {str(e)}")
            print("=" * 60)
            return calc_pb2.CalculateResponse(success=False, error=str(e))
    
    def _determine_orbit_poliastro(self, observations):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ä–±–∏—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º poliastro"""
        
        def error_function(params):
            a, e, i, raan, argp, nu = params
            
            try:
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –æ—Ä–±–∏—Ç—É
                test_orbit = Orbit.from_classical(
                    Sun,
                    a * u.AU,
                    e * u.one,
                    i * u.deg,
                    raan * u.deg,
                    argp * u.deg,
                    nu * u.deg,
                    observations[0]['time']
                )
                
                total_error = 0.0
                valid_observations = 0
                
                for obs in observations:
                    try:
                        # –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
                        time_from_epoch = obs['time'] - test_orbit.epoch
                        predicted_orbit = test_orbit.propagate(time_from_epoch)
                        
                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ó–µ–º–ª–∏
                        earth_orbit = Orbit.from_body_ephem(Earth, obs['time'])
                        
                        # –í—ã—á–∏—Å–ª—è–µ–º –≥–µ–æ—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
                        geo_position = predicted_orbit.r - earth_orbit.r
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–µ–±–µ—Å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                        predicted_coord = SkyCoord(
                            x=geo_position[0], y=geo_position[1], z=geo_position[2],
                            representation_type='cartesian'
                        ).represent_as('spherical')
                        
                        # –í—ã—á–∏—Å–ª—è–µ–º —É–≥–ª–æ–≤—É—é –æ—à–∏–±–∫—É
                        angular_separation = obs['coord'].separation(predicted_coord)
                        total_error += angular_separation.deg ** 2
                        valid_observations += 1
                        
                    except Exception as e:
                        continue
                
                if valid_observations == 0:
                    return 1e10
                    
                return total_error / valid_observations
                
            except Exception:
                return 1e10
        
        # –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ú–∞—Ä—Å–∞)
        x0 = np.array([1.52, 0.09, 1.85, 49.56, 286.5, 0.0])
        print(f"üîÑ –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–±–∏—Ç—ã: a={x0[0]:.3f}, e={x0[1]:.3f}, i={x0[2]:.3f}¬∞")
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        print("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –º–µ—Ç–æ–¥–æ–º Nelder-Mead...")
        result = minimize(error_function, x0, method='Nelder-Mead', 
                         options={'maxiter': 200})
        
        print(f"üîÑ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Ç–µ—Ä–∞—Ü–∏–π: {result.nit}, –§—É–Ω–∫—Ü–∏–π: {result.nfev}")
        print(f"üîÑ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {result.fun:.6f}")
        
        a, e, i, raan, argp, nu = result.x
        print(f"üîÑ –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: a={a:.6f}, e={e:.6f}, i={i:.6f}¬∞, Œ©={raan:.6f}¬∞, œâ={argp:.6f}¬∞")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –æ—Ä–±–∏—Ç—É
        orbit = Orbit.from_classical(
            Sun,
            a * u.AU,
            e * u.one,
            i * u.deg,
            raan * u.deg,
            argp * u.deg,
            nu * u.deg,
            observations[0]['time']
        )
        
        # –í—Ä–µ–º—è –ø–µ—Ä–∏–≥–µ–ª–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        t_p = orbit.epoch.jd
        
        return {
            'a': a, 'e': e, 'i': i, 'raan': raan, 'argp': argp, 't_p': t_p,
            'orbit': orbit
        }
    
    def _calculate_close_approach(self, orbit, days_range=730):
        """–†–∞—Å—á–µ—Ç –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–±–ª–∏–∂–µ–Ω–∏—è —Å –ó–µ–º–ª–µ–π"""
        print(f"üîÑ –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ —Å–±–ª–∏–∂–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ {days_range} –¥–Ω–µ–π...")
        min_distance = float('inf')
        closest_time = orbit.epoch
        checked_points = 0
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–π time_range
        for days in np.linspace(0, days_range, 100):
            time = orbit.epoch + days * u.day
            try:
                # –ü–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–µ—Ç—ã
                comet_orbit = orbit.propagate(time - orbit.epoch)
                
                # –ü–æ–ª–æ–∂–µ–Ω–∏–µ –ó–µ–º–ª–∏
                earth_orbit = Orbit.from_body_ephem(Earth, time)
                
                # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                distance = np.linalg.norm(
                    (comet_orbit.r - earth_orbit.r).to(u.AU).value
                )
                
                checked_points += 1
                
                if distance < min_distance:
                    min_distance = distance
                    closest_time = time
                    
            except Exception:
                continue
        
        print(f"üîÑ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {checked_points} —Ç–æ—á–µ–∫. –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {min_distance:.6f} –∞.–µ.")
        print(f"üîÑ –í—Ä–µ–º—è —Å–±–ª–∏–∂–µ–Ω–∏—è: {closest_time.iso}")
        
        return {
            'jd': closest_time.jd,
            'distance_au': min_distance
        }


def serve():
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    calc_pb2_grpc.add_CometCalculatorServicer_to_server(
        CometCalculatorServicer(), server
    )
    server.add_insecure_port("[::]:50051")
    print("üöÄ Advanced Comet Calculator with poliastro running on port 50051")
    server.start()
    server.wait_for_termination()


if __name__ == "__main__":
    serve()